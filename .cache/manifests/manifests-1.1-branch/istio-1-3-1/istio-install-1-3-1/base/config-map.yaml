---
apiVersion: v1
data:
  mesh: "# Set the following variable to true to disable policy checks by the Mixer.\n\
    # Note that metrics will still be reported to the Mixer.\ndisablePolicyChecks:\
    \ true\n# reportBatchMaxEntries is the number of requests that are batched before\
    \ telemetry data is sent to the mixer server\nreportBatchMaxEntries: 100\n# reportBatchMaxTime\
    \ is the max waiting time before the telemetry data of a request is sent to the\
    \ mixer server\nreportBatchMaxTime: 1s\n\n# Set enableTracing to false to disable\
    \ request tracing.\nenableTracing: true\n\n# Set accessLogFile to empty string\
    \ to disable access log.\naccessLogFile: \"\"\n\n# If accessLogEncoding is TEXT,\
    \ value will be used directly as the log format\n# example: \"[%START_TIME%] %REQ(:METHOD)%\
    \ %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%\\n\"\n# If AccessLogEncoding is\
    \ JSON, value will be parsed as map[string]string\n# example: '{\"start_time\"\
    : \"%START_TIME%\", \"req_method\": \"%REQ(:METHOD)%\"}'\n# Leave empty to use\
    \ default log format\naccessLogFormat: \"\"\n\n# Set accessLogEncoding to JSON\
    \ or TEXT to configure sidecar access log\naccessLogEncoding: 'TEXT'\n\nenableEnvoyAccessLogService:\
    \ false\nmixerCheckServer: istio-policy.$(namespace).svc.cluster.local:15004\n\
    mixerReportServer: istio-telemetry.$(namespace).svc.cluster.local:15004\n# policyCheckFailOpen\
    \ allows traffic in cases when the mixer policy service cannot be reached.\n#\
    \ Default is false which means the traffic is denied when the client is unable\
    \ to connect to Mixer.\npolicyCheckFailOpen: false\n# Let Pilot give ingresses\
    \ the public IP of the Istio ingressgateway\ningressService: istio-ingressgateway\n\
    \n# Default connect timeout for dynamic clusters generated by Pilot and returned\
    \ via XDS\nconnectTimeout: 10s\n\n# Automatic protocol detection uses a set of\
    \ heuristics to\n# determine whether the connection is using TLS or not (on the\n\
    # server side), as well as the application protocol being used\n# (e.g., http\
    \ vs tcp). These heuristics rely on the client sending\n# the first bits of data.\
    \ For server first protocols like MySQL,\n# MongoDB, etc., Envoy will timeout\
    \ on the protocol detection after\n# the specified period, defaulting to non mTLS\
    \ plain TCP\n# traffic. Set this field to tweak the period that Envoy will wait\n\
    # for the client to send the first bits of data. (MUST BE >=1ms)\nprotocolDetectionTimeout:\
    \ 100ms\n\n# DNS refresh rate for Envoy clusters of type STRICT_DNS\ndnsRefreshRate:\
    \ 300s\n\n# Unix Domain Socket through which envoy communicates with NodeAgent\
    \ SDS to get\n# key/cert for mTLS. Use secret-mount files instead of SDS if set\
    \ to empty.\nsdsUdsPath: \"unix:/var/run/sds/uds_path\"\n\n# The trust domain\
    \ corresponds to the trust root of a system.\n# Refer to https://github.com/spiffe/spiffe/blob/master/standards/SPIFFE-ID.md#21-trust-domain\n\
    trustDomain: \"\"\n\n# Set the default behavior of the sidecar for handling outbound\
    \ traffic from the application:\n# ALLOW_ANY - outbound traffic to unknown destinations\
    \ will be allowed, in case there are no\n#   services or ServiceEntries for the\
    \ destination port\n# REGISTRY_ONLY - restrict outbound traffic to services defined\
    \ in the service registry as well\n#   as those defined through ServiceEntries\n\
    outboundTrafficPolicy:\n  mode: ALLOW_ANY\nlocalityLbSetting:\n  enabled: true\n\
    # The namespace to treat as the administrative root namespace for istio\n# configuration.\n\
    rootNamespace: $(namespace)\nconfigSources:\n- address: istio-galley.$(namespace).svc:9901\n\
    \  tlsSettings:\n    mode: ISTIO_MUTUAL\n\ndefaultConfig:\n  #\n  # TCP connection\
    \ timeout between Envoy & the application, and between Envoys.  Used for static\
    \ clusters\n  # defined in Envoy's configuration file\n  connectTimeout: 10s\n\
    \  #\n  ### ADVANCED SETTINGS #############\n  # Where should envoy's configuration\
    \ be stored in the istio-proxy container\n  configPath: \"/etc/istio/proxy\"\n\
    \  binaryPath: \"/usr/local/bin/envoy\"\n  # The pseudo service name used for\
    \ Envoy.\n  serviceCluster: istio-proxy\n  # These settings that determine how\
    \ long an old Envoy\n  # process should be kept alive after an occasional reload.\n\
    \  drainDuration: 45s\n  parentShutdownDuration: 1m0s\n  #\n  # The mode used\
    \ to redirect inbound connections to Envoy. This setting\n  # has no effect on\
    \ outbound traffic: iptables REDIRECT is always used for\n  # outbound connections.\n\
    \  # If \"REDIRECT\", use iptables REDIRECT to NAT and redirect to Envoy.\n  #\
    \ The \"REDIRECT\" mode loses source addresses during redirection.\n  # If \"\
    TPROXY\", use iptables TPROXY to redirect to Envoy.\n  # The \"TPROXY\" mode preserves\
    \ both the source and destination IP\n  # addresses and ports, so that they can\
    \ be used for advanced filtering\n  # and manipulation.\n  # The \"TPROXY\" mode\
    \ also configures the sidecar to run with the\n  # CAP_NET_ADMIN capability, which\
    \ is required to use TPROXY.\n  #interceptionMode: REDIRECT\n  #\n  # Port where\
    \ Envoy listens (on local host) for admin commands\n  # You can exec into the\
    \ istio-proxy container in a pod and\n  # curl the admin port (curl http://localhost:15000/)\
    \ to obtain\n  # diagnostic information from Envoy. See\n  # https://lyft.github.io/envoy/docs/operations/admin.html\n\
    \  # for more details\n  proxyAdminPort: 15000\n  #\n  # Set concurrency to a\
    \ specific number to control the number of Proxy worker threads.\n  # If set to\
    \ 0 (default), then start worker thread for each CPU thread/core.\n  concurrency:\
    \ 2\n  #\n  tracing:\n    zipkin:\n      # Address of the Zipkin collector\n \
    \     address: zipkin.$(namespace):9411\n  #\n  # Mutual TLS authentication between\
    \ sidecars and istio control plane.\n  controlPlaneAuthPolicy: MUTUAL_TLS\n  #\n\
    \  # Address where istio Pilot service is running\n  discoveryAddress: istio-pilot.$(namespace):15011"
  meshNetworks: 'networks: {}'
kind: ConfigMap
metadata:
  labels:
    app: istio
  name: istio
---
apiVersion: v1
data:
  config: "policy: enabled\nalwaysInjectSelector:\n  []\nneverInjectSelector:\n  []\n\
    template: |-\n  rewriteAppHTTPProbe: {{ valueOrDefault .Values.sidecarInjectorWebhook.rewriteAppHTTPProbe\
    \ false }}\n  {{- if or (not .Values.istio_cni.enabled) .Values.global.proxy.enableCoreDump\
    \ }}\n  initContainers:\n  {{ if ne (annotation .ObjectMeta `sidecar.istio.io/interceptionMode`\
    \ .ProxyConfig.InterceptionMode) `NONE` }}\n  {{- if not .Values.istio_cni.enabled\
    \ }}\n  - name: istio-init\n  {{- if contains \"/\" .Values.global.proxy_init.image\
    \ }}\n    image: \"{{ .Values.global.proxy_init.image }}\"\n  {{- else }}\n  \
    \  image: \"{{ .Values.global.hub }}/{{ .Values.global.proxy_init.image }}:{{\
    \ .Values.global.tag }}\"\n  {{- end }}\n    args:\n    - \"-p\"\n    - \"15001\"\
    \n    - \"-z\"\n    - \"15006\"\n    - \"-u\"\n    - 1337\n    - \"-m\"\n    -\
    \ \"{{ annotation .ObjectMeta `sidecar.istio.io/interceptionMode` .ProxyConfig.InterceptionMode\
    \ }}\"\n    - \"-i\"\n    - \"{{ annotation .ObjectMeta `traffic.sidecar.istio.io/includeOutboundIPRanges`\
    \ .Values.global.proxy.includeIPRanges }}\"\n    - \"-x\"\n    - \"{{ annotation\
    \ .ObjectMeta `traffic.sidecar.istio.io/excludeOutboundIPRanges` .Values.global.proxy.excludeIPRanges\
    \ }}\"\n    - \"-b\"\n    - \"{{ annotation .ObjectMeta `traffic.sidecar.istio.io/includeInboundPorts`\
    \ `*` }}\"\n    - \"-d\"\n    - \"{{ excludeInboundPort (annotation .ObjectMeta\
    \ `status.sidecar.istio.io/port` .Values.global.proxy.statusPort) (annotation\
    \ .ObjectMeta `traffic.sidecar.istio.io/excludeInboundPorts` .Values.global.proxy.excludeInboundPorts)\
    \ }}\"\n    {{ if or (isset .ObjectMeta.Annotations `traffic.sidecar.istio.io/excludeOutboundPorts`)\
    \ (ne .Values.global.proxy.excludeOutboundPorts \"\") -}}\n    - \"-o\"\n    -\
    \ \"{{ annotation .ObjectMeta `traffic.sidecar.istio.io/excludeOutboundPorts`\
    \ .Values.global.proxy.excludeOutboundPorts }}\"\n    {{ end -}}\n    {{ if (isset\
    \ .ObjectMeta.Annotations `traffic.sidecar.istio.io/kubevirtInterfaces`) -}}\n\
    \    - \"-k\"\n    - \"{{ index .ObjectMeta.Annotations `traffic.sidecar.istio.io/kubevirtInterfaces`\
    \ }}\"\n    {{ end -}}\n    imagePullPolicy: \"{{ .Values.global.imagePullPolicy\
    \ }}\"\n  {{- if .Values.global.proxy.init.resources }}\n    resources:\n    \
    \  {{ toYaml .Values.global.proxy.init.resources | indent 4 }}\n  {{- else }}\n\
    \    resources: {}\n  {{- end }}\n    securityContext:\n      runAsUser: 0\n \
    \     runAsNonRoot: false\n      capabilities:\n        add:\n        - NET_ADMIN\n\
    \      {{- if .Values.global.proxy.privileged }}\n      privileged: true\n   \
    \   {{- end }}\n    restartPolicy: Always\n  {{- end }}\n  {{  end -}}\n  {{-\
    \ if eq .Values.global.proxy.enableCoreDump true }}\n  - name: enable-core-dump\n\
    \    args:\n    - -c\n    - sysctl -w kernel.core_pattern=/var/lib/istio/core.proxy\
    \ && ulimit -c unlimited\n    command:\n      - /bin/sh\n    image: {{ $.Values.global.proxy.enableCoreDumpImage\
    \ }}\n    imagePullPolicy: IfNotPresent\n    resources: {}\n    securityContext:\n\
    \      runAsUser: 0\n      runAsNonRoot: false\n      privileged: true\n  {{ end\
    \ }}\n  {{- end }}\n  containers:\n  - name: istio-proxy\n  {{- if contains \"\
    /\" (annotation .ObjectMeta `sidecar.istio.io/proxyImage` .Values.global.proxy.image)\
    \ }}\n    image: \"{{ annotation .ObjectMeta `sidecar.istio.io/proxyImage` .Values.global.proxy.image\
    \ }}\"\n  {{- else }}\n    image: \"{{ annotation .ObjectMeta `sidecar.istio.io/proxyImage`\
    \ .Values.global.hub }}/{{ .Values.global.proxy.image }}:{{ .Values.global.tag\
    \ }}\"\n  {{- end }}\n    ports:\n    - containerPort: 15090\n      protocol:\
    \ TCP\n      name: http-envoy-prom\n    args:\n    - proxy\n    - sidecar\n  \
    \  - --domain\n    - $(POD_NAMESPACE).svc.{{ .Values.global.proxy.clusterDomain\
    \ }}\n    - --configPath\n    - \"{{ .ProxyConfig.ConfigPath }}\"\n    - --binaryPath\n\
    \    - \"{{ .ProxyConfig.BinaryPath }}\"\n    - --serviceCluster\n    {{ if ne\
    \ \"\" (index .ObjectMeta.Labels \"app\") -}}\n    - \"{{ index .ObjectMeta.Labels\
    \ `app` }}.$(POD_NAMESPACE)\"\n    {{ else -}}\n    - \"{{ valueOrDefault .DeploymentMeta.Name\
    \ `istio-proxy` }}.{{ valueOrDefault .DeploymentMeta.Namespace `default` }}\"\n\
    \    {{ end -}}\n    - --drainDuration\n    - \"{{ formatDuration .ProxyConfig.DrainDuration\
    \ }}\"\n    - --parentShutdownDuration\n    - \"{{ formatDuration .ProxyConfig.ParentShutdownDuration\
    \ }}\"\n    - --discoveryAddress\n    - \"{{ annotation .ObjectMeta `sidecar.istio.io/discoveryAddress`\
    \ .ProxyConfig.DiscoveryAddress }}\"\n  {{- if eq .Values.global.proxy.tracer\
    \ \"lightstep\" }}\n    - --lightstepAddress\n    - \"{{ .ProxyConfig.GetTracing.GetLightstep.GetAddress\
    \ }}\"\n    - --lightstepAccessToken\n    - \"{{ .ProxyConfig.GetTracing.GetLightstep.GetAccessToken\
    \ }}\"\n    - --lightstepSecure={{ .ProxyConfig.GetTracing.GetLightstep.GetSecure\
    \ }}\n    - --lightstepCacertPath\n    - \"{{ .ProxyConfig.GetTracing.GetLightstep.GetCacertPath\
    \ }}\"\n  {{- else if eq .Values.global.proxy.tracer \"zipkin\" }}\n    - --zipkinAddress\n\
    \    - \"{{ .ProxyConfig.GetTracing.GetZipkin.GetAddress }}\"\n  {{- else if eq\
    \ .Values.global.proxy.tracer \"datadog\" }}\n    - --datadogAgentAddress\n  \
    \  - \"{{ .ProxyConfig.GetTracing.GetDatadog.GetAddress }}\"\n  {{- end }}\n \
    \ {{- if .Values.global.proxy.logLevel }}\n    - --proxyLogLevel={{ .Values.global.proxy.logLevel\
    \ }}\n  {{- end}}\n  {{- if .Values.global.proxy.componentLogLevel }}\n    - --proxyComponentLogLevel={{\
    \ .Values.global.proxy.componentLogLevel }}\n  {{- end}}\n    - --dnsRefreshRate\n\
    \    - {{ .Values.global.proxy.dnsRefreshRate }}\n    - --connectTimeout\n   \
    \ - \"{{ formatDuration .ProxyConfig.ConnectTimeout }}\"\n  {{- if .Values.global.proxy.envoyStatsd.enabled\
    \ }}\n    - --statsdUdpAddress\n    - \"{{ .ProxyConfig.StatsdUdpAddress }}\"\n\
    \  {{- end }}\n  {{- if .Values.global.proxy.envoyMetricsService.enabled }}\n\
    \    - --envoyMetricsServiceAddress\n    - \"{{ .ProxyConfig.GetEnvoyMetricsService.GetAddress\
    \ }}\"\n  {{- end }}\n  {{- if .Values.global.proxy.envoyAccessLogService.enabled\
    \ }}\n    - --envoyAccessLogService\n    - '{{ structToJSON .ProxyConfig.EnvoyAccessLogService\
    \ }}'\n  {{- end }}\n    - --proxyAdminPort\n    - \"{{ .ProxyConfig.ProxyAdminPort\
    \ }}\"\n    {{ if gt .ProxyConfig.Concurrency 0 -}}\n    - --concurrency\n   \
    \ - \"{{ .ProxyConfig.Concurrency }}\"\n    {{ end -}}\n    - --controlPlaneAuthPolicy\n\
    \    - \"{{ annotation .ObjectMeta `sidecar.istio.io/controlPlaneAuthPolicy` .ProxyConfig.ControlPlaneAuthPolicy\
    \ }}\"\n  {{- if (ne (annotation .ObjectMeta \"status.sidecar.istio.io/port\"\
    \ .Values.global.proxy.statusPort) \"0\") }}\n    - --statusPort\n    - \"{{ annotation\
    \ .ObjectMeta `status.sidecar.istio.io/port` .Values.global.proxy.statusPort }}\"\
    \n    - --applicationPorts\n    - \"{{ annotation .ObjectMeta `readiness.status.sidecar.istio.io/applicationPorts`\
    \ (applicationPorts .Spec.Containers) }}\"\n  {{- end }}\n  {{- if .Values.global.trustDomain\
    \ }}\n    - --trust-domain={{ .Values.global.trustDomain }}\n  {{- end }}\n  \
    \  env:\n    - name: POD_NAME\n      valueFrom:\n        fieldRef:\n         \
    \ fieldPath: metadata.name\n    - name: ISTIO_META_POD_PORTS\n      value: |-\n\
    \        [\n        {{- range $index1, $c := .Spec.Containers }}\n          {{-\
    \ range $index2, $p := $c.Ports }}\n            {{if or (ne $index1 0) (ne $index2\
    \ 0)}},{{end}}{{ structToJSON $p }}\n          {{- end}}\n        {{- end}}\n\
    \        ]\n    - name: ISTIO_META_CLUSTER_ID\n      value: \"{{ valueOrDefault\
    \ .Values.global.multicluster.clusterName `Kubernetes` }}\"\n    - name: POD_NAMESPACE\n\
    \      valueFrom:\n        fieldRef:\n          fieldPath: metadata.namespace\n\
    \    - name: INSTANCE_IP\n      valueFrom:\n        fieldRef:\n          fieldPath:\
    \ status.podIP\n    - name: SERVICE_ACCOUNT\n      valueFrom:\n        fieldRef:\n\
    \          fieldPath: spec.serviceAccountName\n  {{- if eq .Values.global.proxy.tracer\
    \ \"datadog\" }}\n    - name: HOST_IP\n      valueFrom:\n        fieldRef:\n \
    \         fieldPath: status.hostIP\n  {{- if isset .ObjectMeta.Annotations `apm.datadoghq.com/env`\
    \ }}\n  {{- range $key, $value := fromJSON (index .ObjectMeta.Annotations `apm.datadoghq.com/env`)\
    \ }}\n    - name: {{ $key }}\n      value: \"{{ $value }}\"\n  {{- end }}\n  {{-\
    \ end }}\n  {{- end }}\n    - name: ISTIO_META_POD_NAME\n      valueFrom:\n  \
    \      fieldRef:\n          fieldPath: metadata.name\n    - name: ISTIO_META_CONFIG_NAMESPACE\n\
    \      valueFrom:\n        fieldRef:\n          fieldPath: metadata.namespace\n\
    \    - name: SDS_ENABLED\n      value: {{ $.Values.global.sds.enabled }}\n   \
    \ - name: ISTIO_META_INTERCEPTION_MODE\n      value: \"{{ or (index .ObjectMeta.Annotations\
    \ `sidecar.istio.io/interceptionMode`) .ProxyConfig.InterceptionMode.String }}\"\
    \n    - name: ISTIO_META_INCLUDE_INBOUND_PORTS\n      value: \"{{ annotation .ObjectMeta\
    \ `traffic.sidecar.istio.io/includeInboundPorts` (applicationPorts .Spec.Containers)\
    \ }}\"\n    {{- if .Values.global.network }}\n    - name: ISTIO_META_NETWORK\n\
    \      value: \"{{ .Values.global.network }}\"\n    {{- end }}\n    {{ if .ObjectMeta.Annotations\
    \ }}\n    - name: ISTIO_METAJSON_ANNOTATIONS\n      value: |\n             {{\
    \ toJSON .ObjectMeta.Annotations }}\n    {{ end }}\n    {{ if .ObjectMeta.Labels\
    \ }}\n    - name: ISTIO_METAJSON_LABELS\n      value: |\n             {{ toJSON\
    \ .ObjectMeta.Labels }}\n    {{ end }}\n    {{- if .DeploymentMeta.Name }}\n \
    \   - name: ISTIO_META_WORKLOAD_NAME\n      value: {{ .DeploymentMeta.Name }}\n\
    \    {{ end }}\n    {{- if and .TypeMeta.APIVersion .DeploymentMeta.Name }}\n\
    \    - name: ISTIO_META_OWNER\n      value: kubernetes://api/{{ .TypeMeta.APIVersion\
    \ }}/namespaces/{{ valueOrDefault .DeploymentMeta.Namespace `default` }}/{{ toLower\
    \ .TypeMeta.Kind}}s/{{ .DeploymentMeta.Name }}\n     {{- end}}\n    {{- if (isset\
    \ .ObjectMeta.Annotations `sidecar.istio.io/bootstrapOverride`) }}\n    - name:\
    \ ISTIO_BOOTSTRAP_OVERRIDE\n      value: \"/etc/istio/custom-bootstrap/custom_bootstrap.json\"\
    \n    {{- end }}\n    {{- if .Values.global.sds.customTokenDirectory }}\n    -\
    \ name: ISTIO_META_SDS_TOKEN_PATH\n      value: \"{{ .Values.global.sds.customTokenDirectory\
    \ -}}/sdstoken\"\n    {{- end }}\n    {{- if .Values.global.meshID }}\n    - name:\
    \ ISTIO_META_MESH_ID\n      value: \"{{ .Values.global.meshID }}\"\n    {{- else\
    \ if .Values.global.trustDomain }}\n    - name: ISTIO_META_MESH_ID\n      value:\
    \ \"{{ .Values.global.trustDomain }}\"\n    {{- end }}\n    imagePullPolicy: {{\
    \ .Values.global.imagePullPolicy }}\n    {{ if ne (annotation .ObjectMeta `status.sidecar.istio.io/port`\
    \ .Values.global.proxy.statusPort) `0` }}\n    readinessProbe:\n      httpGet:\n\
    \        path: /healthz/ready\n        port: {{ annotation .ObjectMeta `status.sidecar.istio.io/port`\
    \ .Values.global.proxy.statusPort }}\n      initialDelaySeconds: {{ annotation\
    \ .ObjectMeta `readiness.status.sidecar.istio.io/initialDelaySeconds` .Values.global.proxy.readinessInitialDelaySeconds\
    \ }}\n      periodSeconds: {{ annotation .ObjectMeta `readiness.status.sidecar.istio.io/periodSeconds`\
    \ .Values.global.proxy.readinessPeriodSeconds }}\n      failureThreshold: {{ annotation\
    \ .ObjectMeta `readiness.status.sidecar.istio.io/failureThreshold` .Values.global.proxy.readinessFailureThreshold\
    \ }}\n    {{ end -}}\n    securityContext:\n      {{- if .Values.global.proxy.privileged\
    \ }}\n      privileged: true\n      {{- end }}\n      {{- if ne .Values.global.proxy.enableCoreDump\
    \ true }}\n      readOnlyRootFilesystem: true\n      {{- end }}\n      {{ if eq\
    \ (annotation .ObjectMeta `sidecar.istio.io/interceptionMode` .ProxyConfig.InterceptionMode)\
    \ `TPROXY` -}}\n      capabilities:\n        add:\n        - NET_ADMIN\n     \
    \ runAsGroup: 1337\n      {{ else -}}\n      {{ if .Values.global.sds.enabled\
    \ }}\n      runAsGroup: 1337\n      {{- end }}\n      runAsUser: 1337\n      {{-\
    \ end }}\n    resources:\n      {{ if or (isset .ObjectMeta.Annotations `sidecar.istio.io/proxyCPU`)\
    \ (isset .ObjectMeta.Annotations `sidecar.istio.io/proxyMemory`) -}}\n      requests:\n\
    \        {{ if (isset .ObjectMeta.Annotations `sidecar.istio.io/proxyCPU`) -}}\n\
    \        cpu: \"{{ index .ObjectMeta.Annotations `sidecar.istio.io/proxyCPU` }}\"\
    \n        {{ end}}\n        {{ if (isset .ObjectMeta.Annotations `sidecar.istio.io/proxyMemory`)\
    \ -}}\n        memory: \"{{ index .ObjectMeta.Annotations `sidecar.istio.io/proxyMemory`\
    \ }}\"\n        {{ end }}\n    {{ else -}}\n  {{- if .Values.global.proxy.resources\
    \ }}\n      {{ toYaml .Values.global.proxy.resources | indent 4 }}\n  {{- end\
    \ }}\n    {{  end -}}\n    volumeMounts:\n    {{ if (isset .ObjectMeta.Annotations\
    \ `sidecar.istio.io/bootstrapOverride`) }}\n    - mountPath: /etc/istio/custom-bootstrap\n\
    \      name: custom-bootstrap-volume\n    {{- end }}\n    - mountPath: /etc/istio/proxy\n\
    \      name: istio-envoy\n    {{- if .Values.global.sds.enabled }}\n    - mountPath:\
    \ /var/run/sds\n      name: sds-uds-path\n      readOnly: true\n    - mountPath:\
    \ /var/run/secrets/tokens\n      name: istio-token\n    {{- if .Values.global.sds.customTokenDirectory\
    \ }}\n    - mountPath: \"{{ .Values.global.sds.customTokenDirectory -}}\"\n  \
    \    name: custom-sds-token\n      readOnly: true\n    {{- end }}\n    {{- else\
    \ }}\n    - mountPath: /etc/certs/\n      name: istio-certs\n      readOnly: true\n\
    \    {{- end }}\n    {{- if and (eq .Values.global.proxy.tracer \"lightstep\"\
    ) .Values.global.tracer.lightstep.cacertPath }}\n    - mountPath: {{ directory\
    \ .ProxyConfig.GetTracing.GetLightstep.GetCacertPath }}\n      name: lightstep-certs\n\
    \      readOnly: true\n    {{- end }}\n      {{- if isset .ObjectMeta.Annotations\
    \ `sidecar.istio.io/userVolumeMount` }}\n      {{ range $index, $value := fromJSON\
    \ (index .ObjectMeta.Annotations `sidecar.istio.io/userVolumeMount`) }}\n    -\
    \ name: \"{{  $index }}\"\n      {{ toYaml $value | indent 4 }}\n      {{ end\
    \ }}\n      {{- end }}\n  volumes:\n  {{- if (isset .ObjectMeta.Annotations `sidecar.istio.io/bootstrapOverride`)\
    \ }}\n  - name: custom-bootstrap-volume\n    configMap:\n      name: {{ annotation\
    \ .ObjectMeta `sidecar.istio.io/bootstrapOverride` \"\" }}\n  {{- end }}\n  -\
    \ emptyDir:\n      medium: Memory\n    name: istio-envoy\n  {{- if .Values.global.sds.enabled\
    \ }}\n  - name: sds-uds-path\n    hostPath:\n      path: /var/run/sds\n  - name:\
    \ istio-token\n    projected:\n      sources:\n        - serviceAccountToken:\n\
    \            path: istio-token\n            expirationSeconds: 43200\n       \
    \     audience: {{ .Values.global.sds.token.aud }}\n  {{- if .Values.global.sds.customTokenDirectory\
    \ }}\n  - name: custom-sds-token\n    secret:\n      secretName: sdstokensecret\n\
    \  {{- end }}\n  {{- else }}\n  - name: istio-certs\n    secret:\n      optional:\
    \ true\n      {{ if eq .Spec.ServiceAccountName \"\" }}\n      secretName: istio.default\n\
    \      {{ else -}}\n      secretName: {{  printf \"istio.%s\" .Spec.ServiceAccountName\
    \ }}\n      {{  end -}}\n    {{- if isset .ObjectMeta.Annotations `sidecar.istio.io/userVolume`\
    \ }}\n    {{range $index, $value := fromJSON (index .ObjectMeta.Annotations `sidecar.istio.io/userVolume`)\
    \ }}\n  - name: \"{{ $index }}\"\n    {{ toYaml $value | indent 2 }}\n    {{ end\
    \ }}\n    {{ end }}\n  {{- end }}\n  {{- if and (eq .Values.global.proxy.tracer\
    \ \"lightstep\") .Values.global.tracer.lightstep.cacertPath }}\n  - name: lightstep-certs\n\
    \    secret:\n      optional: true\n      secretName: lightstep.cacert\n  {{-\
    \ end }}\n  {{- if .Values.global.podDNSSearchNamespaces }}\n  dnsConfig:\n  \
    \  searches:\n      {{- range .Values.global.podDNSSearchNamespaces }}\n     \
    \ - {{ render . }}\n      {{- end }}\n  {{- end }}\n  podRedirectAnnot:\n    \
    \ sidecar.istio.io/interceptionMode: \"{{ annotation .ObjectMeta `sidecar.istio.io/interceptionMode`\
    \ .ProxyConfig.InterceptionMode }}\"\n     traffic.sidecar.istio.io/includeOutboundIPRanges:\
    \ \"{{ annotation .ObjectMeta `traffic.sidecar.istio.io/includeOutboundIPRanges`\
    \ .Values.global.proxy.includeIPRanges }}\"\n     traffic.sidecar.istio.io/excludeOutboundIPRanges:\
    \ \"{{ annotation .ObjectMeta `traffic.sidecar.istio.io/excludeOutboundIPRanges`\
    \ .Values.global.proxy.excludeIPRanges }}\"\n     traffic.sidecar.istio.io/includeInboundPorts:\
    \ \"{{ annotation .ObjectMeta `traffic.sidecar.istio.io/includeInboundPorts` (includeInboundPorts\
    \ .Spec.Containers) }}\"\n     traffic.sidecar.istio.io/excludeInboundPorts: \"\
    {{ excludeInboundPort (annotation .ObjectMeta `status.sidecar.istio.io/port` .Values.global.proxy.statusPort)\
    \ (annotation .ObjectMeta `traffic.sidecar.istio.io/excludeInboundPorts` .Values.global.proxy.excludeInboundPorts)\
    \ }}\"\n  {{ if or (isset .ObjectMeta.Annotations `traffic.sidecar.istio.io/excludeOutboundPorts`)\
    \ (ne .Values.global.proxy.excludeOutboundPorts \"\") }}\n     traffic.sidecar.istio.io/excludeOutboundPorts:\
    \ \"{{ annotation .ObjectMeta `traffic.sidecar.istio.io/excludeOutboundPorts`\
    \ .Values.global.proxy.excludeOutboundPorts }}\"\n  {{- end }}\n     traffic.sidecar.istio.io/kubevirtInterfaces:\
    \ \"{{ index .ObjectMeta.Annotations `traffic.sidecar.istio.io/kubevirtInterfaces`\
    \ }}\""
  values: '{"certmanager": {"enabled": false}, "galley": {"enabled": true, "global":
    {"arch": {"amd64": 2, "ppc64le": 2, "s390x": 2}, "configValidation": true, "controlPlaneSecurityEnabled":
    true, "defaultNodeSelector": {}, "defaultPodDisruptionBudget": {"enabled": true},
    "defaultResources": {"limits": {"memory": "20Mi"}, "requests": {"cpu": "10m",
    "memory": "20Mi"}}, "defaultTolerations": [], "disablePolicyChecks": true, "enableHelmTest":
    false, "enableTracing": true, "hub": "docker.artifactory.ikarem.io/user/ravi/kubeflow/istio-release",
    "imagePullPolicy": "IfNotPresent", "imagePullSecrets": [], "k8sIngress": {"enableHttps":
    false, "enabled": false, "gatewayName": "ingressgateway"}, "localityLbSetting":
    {"enabled": true}, "logging": {"level": "default:info"}, "meshExpansion": {"enabled":
    false, "useILB": false}, "meshID": "", "meshNetworks": {}, "monitoringPort": 15014,
    "mtls": {"enabled": false}, "multiCluster": {"clusterName": "", "enabled": false},
    "oneNamespace": false, "outboundTrafficPolicy": {"mode": "ALLOW_ANY"}, "policyCheckFailOpen":
    false, "priorityClassName": "", "proxy": {"accessLogEncoding": "TEXT", "accessLogFile":
    "", "accessLogFormat": "", "autoInject": "enabled", "clusterDomain": "cluster.local",
    "componentLogLevel": "", "concurrency": 2, "dnsRefreshRate": "300s", "enableCoreDump":
    false, "enableCoreDumpImage": "ubuntu:xenial", "envoyAccessLogService": {"enabled":
    false, "host": null, "port": null, "tcpKeepalive": {"interval": "10s", "probes":
    3, "time": "10s"}, "tlsSettings": {"caCertificates": null, "clientCertificate":
    null, "mode": "DISABLE", "privateKey": null, "sni": null, "subjectAltNames": []}},
    "envoyMetricsService": {"enabled": false, "host": null, "port": null}, "envoyStatsd":
    {"enabled": false, "host": null, "port": null}, "excludeIPRanges": "", "excludeInboundPorts":
    "", "excludeOutboundPorts": "", "image": "proxyv2", "includeIPRanges": "*", "includeInboundPorts":
    "*", "init": {"limits": {"memory": "20Mi"}, "requests": {"cpu": "10m", "memory":
    "20Mi"}}, "kubevirtInterfaces": "", "logLevel": "", "privileged": false, "protocolDetectionTimeout":
    "100ms", "readinessFailureThreshold": 30, "readinessInitialDelaySeconds": 1, "readinessPeriodSeconds":
    2, "resources": {"limits": {"memory": "20Mi"}, "requests": {"cpu": "10m", "memory":
    "20Mi"}}, "statusPort": 15020, "tracer": "zipkin"}, "proxy_init": {"image": "proxy_init"},
    "sds": {"enabled": true, "token": {"aud": "istio-ca"}, "udsPath": "unix:/var/run/sds/uds_path"},
    "tag": "release-1.3-latest-daily", "tracer": {"datadog": {"address": "$(HOST_IP):8126"},
    "lightstep": {"accessToken": "", "address": "", "cacertPath": "", "secure": true},
    "zipkin": {"address": ""}}, "trustDomain": "", "useMCP": true}, "image": "galley",
    "nodeSelector": {}, "podAntiAffinityLabelSelector": [], "podAntiAffinityTermLabelSelector":
    [], "replicaCount": 1, "rollingMaxSurge": "100%", "rollingMaxUnavailable": "25%",
    "tolerations": []}, "gateways": {"enabled": true, "global": {"arch": {"amd64":
    2, "ppc64le": 2, "s390x": 2}, "configValidation": true, "controlPlaneSecurityEnabled":
    true, "defaultNodeSelector": {}, "defaultPodDisruptionBudget": {"enabled": true},
    "defaultResources": {"limits": {"memory": "20Mi"}, "requests": {"cpu": "10m",
    "memory": "20Mi"}}, "defaultTolerations": [], "disablePolicyChecks": true, "enableHelmTest":
    false, "enableTracing": true, "hub": "docker.artifactory.ikarem.io/user/ravi/kubeflow/istio-release",
    "imagePullPolicy": "IfNotPresent", "imagePullSecrets": [], "k8sIngress": {"enableHttps":
    false, "enabled": false, "gatewayName": "ingressgateway"}, "localityLbSetting":
    {"enabled": true}, "logging": {"level": "default:info"}, "meshExpansion": {"enabled":
    false, "useILB": false}, "meshID": "", "meshNetworks": {}, "monitoringPort": 15014,
    "mtls": {"enabled": false}, "multiCluster": {"clusterName": "", "enabled": false},
    "oneNamespace": false, "outboundTrafficPolicy": {"mode": "ALLOW_ANY"}, "policyCheckFailOpen":
    false, "priorityClassName": "", "proxy": {"accessLogEncoding": "TEXT", "accessLogFile":
    "", "accessLogFormat": "", "autoInject": "enabled", "clusterDomain": "cluster.local",
    "componentLogLevel": "", "concurrency": 2, "dnsRefreshRate": "300s", "enableCoreDump":
    false, "enableCoreDumpImage": "ubuntu:xenial", "envoyAccessLogService": {"enabled":
    false, "host": null, "port": null, "tcpKeepalive": {"interval": "10s", "probes":
    3, "time": "10s"}, "tlsSettings": {"caCertificates": null, "clientCertificate":
    null, "mode": "DISABLE", "privateKey": null, "sni": null, "subjectAltNames": []}},
    "envoyMetricsService": {"enabled": false, "host": null, "port": null}, "envoyStatsd":
    {"enabled": false, "host": null, "port": null}, "excludeIPRanges": "", "excludeInboundPorts":
    "", "excludeOutboundPorts": "", "image": "proxyv2", "includeIPRanges": "*", "includeInboundPorts":
    "*", "init": {"limits": {"memory": "20Mi"}, "requests": {"cpu": "10m", "memory":
    "20Mi"}}, "kubevirtInterfaces": "", "logLevel": "", "privileged": false, "protocolDetectionTimeout":
    "100ms", "readinessFailureThreshold": 30, "readinessInitialDelaySeconds": 1, "readinessPeriodSeconds":
    2, "resources": {"limits": {"memory": "20Mi"}, "requests": {"cpu": "10m", "memory":
    "20Mi"}}, "statusPort": 15020, "tracer": "zipkin"}, "proxy_init": {"image": "proxy_init"},
    "sds": {"enabled": true, "token": {"aud": "istio-ca"}, "udsPath": "unix:/var/run/sds/uds_path"},
    "tag": "release-1.3-latest-daily", "tracer": {"datadog": {"address": "$(HOST_IP):8126"},
    "lightstep": {"accessToken": "", "address": "", "cacertPath": "", "secure": true},
    "zipkin": {"address": ""}}, "trustDomain": "", "useMCP": true}, "istio-egressgateway":
    {"autoscaleEnabled": true, "autoscaleMax": 5, "autoscaleMin": 1, "cpu": {"targetAverageUtilization":
    80}, "enabled": false, "env": {"ISTIO_META_ROUTER_MODE": "sni-dnat"}, "labels":
    {"app": "istio-egressgateway", "istio": "egressgateway"}, "nodeSelector": {},
    "podAnnotations": {}, "podAntiAffinityLabelSelector": [], "podAntiAffinityTermLabelSelector":
    [], "ports": [{"name": "http2", "port": 80}, {"name": "https", "port": 443}, {"name":
    "tls", "port": 15443, "targetPort": 15443}], "resources": {"limits": {"memory":
    "20Mi"}, "requests": {"cpu": "10m", "memory": "20Mi"}}, "rollingMaxSurge": "100%",
    "rollingMaxUnavailable": "25%", "secretVolumes": [{"mountPath": "/etc/istio/egressgateway-certs",
    "name": "egressgateway-certs", "secretName": "istio-egressgateway-certs"}, {"mountPath":
    "/etc/istio/egressgateway-ca-certs", "name": "egressgateway-ca-certs", "secretName":
    "istio-egressgateway-ca-certs"}], "serviceAnnotations": {}, "tolerations": [],
    "type": "ClusterIP"}, "istio-ilbgateway": {"autoscaleEnabled": true, "autoscaleMax":
    5, "autoscaleMin": 1, "cpu": {"targetAverageUtilization": 80}, "enabled": false,
    "labels": {"app": "istio-ilbgateway", "istio": "ilbgateway"}, "loadBalancerIP":
    "", "nodeSelector": {}, "podAnnotations": {}, "ports": [{"name": "grpc-pilot-mtls",
    "port": 15011}, {"name": "grpc-pilot", "port": 15010}, {"name": "tcp-citadel-grpc-tls",
    "port": 8060, "targetPort": 8060}, {"name": "tcp-dns", "port": 5353}], "resources":
    {"limits": {"memory": "20Mi"}, "requests": {"cpu": "10m", "memory": "20Mi"}},
    "rollingMaxSurge": "100%", "rollingMaxUnavailable": "25%", "secretVolumes": [{"mountPath":
    "/etc/istio/ilbgateway-certs", "name": "ilbgateway-certs", "secretName": "istio-ilbgateway-certs"},
    {"mountPath": "/etc/istio/ilbgateway-ca-certs", "name": "ilbgateway-ca-certs",
    "secretName": "istio-ilbgateway-ca-certs"}], "serviceAnnotations": {"cloud.google.com/load-balancer-type":
    "internal"}, "tolerations": [], "type": "LoadBalancer"}, "istio-ingressgateway":
    {"applicationPorts": "", "autoscaleEnabled": true, "autoscaleMax": 5, "autoscaleMin":
    1, "cpu": {"targetAverageUtilization": 80}, "enabled": true, "env": {"ISTIO_META_ROUTER_MODE":
    "sni-dnat"}, "externalIPs": [], "labels": {"app": "istio-ingressgateway", "istio":
    "ingressgateway"}, "loadBalancerIP": "", "loadBalancerSourceRanges": [], "meshExpansionPorts":
    [{"name": "tcp-pilot-grpc-tls", "port": 15011, "targetPort": 15011}, {"name":
    "tcp-mixer-grpc-tls", "port": 15004, "targetPort": 15004}, {"name": "tcp-citadel-grpc-tls",
    "port": 8060, "targetPort": 8060}, {"name": "tcp-dns-tls", "port": 853, "targetPort":
    853}], "nodeSelector": {}, "podAnnotations": {}, "podAntiAffinityLabelSelector":
    [], "podAntiAffinityTermLabelSelector": [], "ports": [{"name": "status-port",
    "port": 15020, "targetPort": 15020}, {"name": "http2", "nodePort": 31380, "port":
    80, "targetPort": 80}, {"name": "https", "nodePort": 31390, "port": 443}, {"name":
    "tcp", "nodePort": 31400, "port": 31400}, {"name": "https-kiali", "port": 15029,
    "targetPort": 15029}, {"name": "https-prometheus", "port": 15030, "targetPort":
    15030}, {"name": "https-grafana", "port": 15031, "targetPort": 15031}, {"name":
    "https-tracing", "port": 15032, "targetPort": 15032}, {"name": "tls", "port":
    15443, "targetPort": 15443}], "resources": {"limits": {"memory": "20Mi"}, "requests":
    {"cpu": "10m", "memory": "20Mi"}}, "rollingMaxSurge": "100%", "rollingMaxUnavailable":
    "25%", "sds": {"enabled": false, "image": "node-agent-k8s", "resources": {"limits":
    {"memory": "20Mi"}, "requests": {"cpu": "10m", "memory": "20Mi"}}}, "secretVolumes":
    [{"mountPath": "/etc/istio/ingressgateway-certs", "name": "ingressgateway-certs",
    "secretName": "istio-ingressgateway-certs"}, {"mountPath": "/etc/istio/ingressgateway-ca-certs",
    "name": "ingressgateway-ca-certs", "secretName": "istio-ingressgateway-ca-certs"}],
    "serviceAnnotations": {}, "tolerations": [], "type": "LoadBalancer"}}, "global":
    {"arch": {"amd64": 2, "ppc64le": 2, "s390x": 2}, "configValidation": true, "controlPlaneSecurityEnabled":
    true, "defaultNodeSelector": {}, "defaultPodDisruptionBudget": {"enabled": true},
    "defaultResources": {"limits": {"memory": "20Mi"}, "requests": {"cpu": "10m",
    "memory": "20Mi"}}, "defaultTolerations": [], "disablePolicyChecks": true, "enableHelmTest":
    false, "enableTracing": true, "hub": "docker.artifactory.ikarem.io/user/ravi/kubeflow/istio-release",
    "imagePullPolicy": "IfNotPresent", "imagePullSecrets": [], "k8sIngress": {"enableHttps":
    false, "enabled": false, "gatewayName": "ingressgateway"}, "localityLbSetting":
    {"enabled": true}, "logging": {"level": "default:info"}, "meshExpansion": {"enabled":
    false, "useILB": false}, "meshID": "", "meshNetworks": {}, "monitoringPort": 15014,
    "mtls": {"enabled": false}, "multiCluster": {"clusterName": "", "enabled": false},
    "oneNamespace": false, "outboundTrafficPolicy": {"mode": "ALLOW_ANY"}, "policyCheckFailOpen":
    false, "priorityClassName": "", "proxy": {"accessLogEncoding": "TEXT", "accessLogFile":
    "", "accessLogFormat": "", "autoInject": "enabled", "clusterDomain": "cluster.local",
    "componentLogLevel": "", "concurrency": 2, "dnsRefreshRate": "300s", "enableCoreDump":
    false, "enableCoreDumpImage": "ubuntu:xenial", "envoyAccessLogService": {"enabled":
    false, "host": null, "port": null, "tcpKeepalive": {"interval": "10s", "probes":
    3, "time": "10s"}, "tlsSettings": {"caCertificates": null, "clientCertificate":
    null, "mode": "DISABLE", "privateKey": null, "sni": null, "subjectAltNames": []}},
    "envoyMetricsService": {"enabled": false, "host": null, "port": null}, "envoyStatsd":
    {"enabled": false, "host": null, "port": null}, "excludeIPRanges": "", "excludeInboundPorts":
    "", "excludeOutboundPorts": "", "image": "proxyv2", "includeIPRanges": "*", "includeInboundPorts":
    "*", "init": {"limits": {"memory": "20Mi"}, "requests": {"cpu": "10m", "memory":
    "20Mi"}}, "kubevirtInterfaces": "", "logLevel": "", "privileged": false, "protocolDetectionTimeout":
    "100ms", "readinessFailureThreshold": 30, "readinessInitialDelaySeconds": 1, "readinessPeriodSeconds":
    2, "resources": {"limits": {"memory": "20Mi"}, "requests": {"cpu": "10m", "memory":
    "20Mi"}}, "statusPort": 15020, "tracer": "zipkin"}, "proxy_init": {"image": "proxy_init"},
    "sds": {"enabled": true, "token": {"aud": "istio-ca"}, "udsPath": "unix:/var/run/sds/uds_path"},
    "tag": "release-1.3-latest-daily", "tracer": {"datadog": {"address": "$(HOST_IP):8126"},
    "lightstep": {"accessToken": "", "address": "", "cacertPath": "", "secure": true},
    "zipkin": {"address": ""}}, "trustDomain": "", "useMCP": true}, "grafana": {"enabled":
    false}, "istio_cni": {"enabled": false}, "istiocoredns": {"enabled": false}, "kiali":
    {"enabled": false}, "mixer": {"adapters": {"kubernetesenv": {"enabled": true},
    "prometheus": {"enabled": true, "metricsExpiryDuration": "10m"}, "stdio": {"enabled":
    false, "outputAsJson": true}, "useAdapterCRDs": false}, "env": {"GODEBUG": "gctrace=1",
    "GOMAXPROCS": "6"}, "global": {"arch": {"amd64": 2, "ppc64le": 2, "s390x": 2},
    "configValidation": true, "controlPlaneSecurityEnabled": true, "defaultNodeSelector":
    {}, "defaultPodDisruptionBudget": {"enabled": true}, "defaultResources": {"limits":
    {"memory": "20Mi"}, "requests": {"cpu": "10m", "memory": "20Mi"}}, "defaultTolerations":
    [], "disablePolicyChecks": true, "enableHelmTest": false, "enableTracing": true,
    "hub": "docker.artifactory.ikarem.io/user/ravi/kubeflow/istio-release", "imagePullPolicy":
    "IfNotPresent", "imagePullSecrets": [], "k8sIngress": {"enableHttps": false, "enabled":
    false, "gatewayName": "ingressgateway"}, "localityLbSetting": {"enabled": true},
    "logging": {"level": "default:info"}, "meshExpansion": {"enabled": false, "useILB":
    false}, "meshID": "", "meshNetworks": {}, "monitoringPort": 15014, "mtls": {"enabled":
    false}, "multiCluster": {"clusterName": "", "enabled": false}, "oneNamespace":
    false, "outboundTrafficPolicy": {"mode": "ALLOW_ANY"}, "policyCheckFailOpen":
    false, "priorityClassName": "", "proxy": {"accessLogEncoding": "TEXT", "accessLogFile":
    "", "accessLogFormat": "", "autoInject": "enabled", "clusterDomain": "cluster.local",
    "componentLogLevel": "", "concurrency": 2, "dnsRefreshRate": "300s", "enableCoreDump":
    false, "enableCoreDumpImage": "ubuntu:xenial", "envoyAccessLogService": {"enabled":
    false, "host": null, "port": null, "tcpKeepalive": {"interval": "10s", "probes":
    3, "time": "10s"}, "tlsSettings": {"caCertificates": null, "clientCertificate":
    null, "mode": "DISABLE", "privateKey": null, "sni": null, "subjectAltNames": []}},
    "envoyMetricsService": {"enabled": false, "host": null, "port": null}, "envoyStatsd":
    {"enabled": false, "host": null, "port": null}, "excludeIPRanges": "", "excludeInboundPorts":
    "", "excludeOutboundPorts": "", "image": "proxyv2", "includeIPRanges": "*", "includeInboundPorts":
    "*", "init": {"limits": {"memory": "20Mi"}, "requests": {"cpu": "10m", "memory":
    "20Mi"}}, "kubevirtInterfaces": "", "logLevel": "", "privileged": false, "protocolDetectionTimeout":
    "100ms", "readinessFailureThreshold": 30, "readinessInitialDelaySeconds": 1, "readinessPeriodSeconds":
    2, "resources": {"limits": {"memory": "20Mi"}, "requests": {"cpu": "10m", "memory":
    "20Mi"}}, "statusPort": 15020, "tracer": "zipkin"}, "proxy_init": {"image": "proxy_init"},
    "sds": {"enabled": true, "token": {"aud": "istio-ca"}, "udsPath": "unix:/var/run/sds/uds_path"},
    "tag": "release-1.3-latest-daily", "tracer": {"datadog": {"address": "$(HOST_IP):8126"},
    "lightstep": {"accessToken": "", "address": "", "cacertPath": "", "secure": true},
    "zipkin": {"address": ""}}, "trustDomain": "", "useMCP": true}, "image": "mixer",
    "nodeSelector": {}, "podAnnotations": {}, "podAntiAffinityLabelSelector": [],
    "podAntiAffinityTermLabelSelector": [], "policy": {"autoscaleEnabled": true, "autoscaleMax":
    5, "autoscaleMin": 1, "cpu": {"targetAverageUtilization": 80}, "enabled": true,
    "replicaCount": 1, "rollingMaxSurge": "100%", "rollingMaxUnavailable": "25%"},
    "telemetry": {"autoscaleEnabled": true, "autoscaleMax": 5, "autoscaleMin": 1,
    "cpu": {"targetAverageUtilization": 80}, "enabled": true, "loadshedding": {"latencyThreshold":
    "100ms", "mode": "enforce"}, "replicaCount": 1, "reportBatchMaxEntries": 100,
    "reportBatchMaxTime": "1s", "resources": {"limits": {"cpu": "4800m", "memory":
    "4G"}, "requests": {"cpu": "1000m", "memory": "1G"}}, "rollingMaxSurge": "100%",
    "rollingMaxUnavailable": "25%", "sessionAffinityEnabled": false}, "tolerations":
    []}, "nodeagent": {"enabled": true, "env": {"CA_ADDR": "istio-citadel:8060", "CA_PROVIDER":
    "Citadel", "PLUGINS": "", "VALID_TOKEN": true}, "global": {"arch": {"amd64": 2,
    "ppc64le": 2, "s390x": 2}, "configValidation": true, "controlPlaneSecurityEnabled":
    true, "defaultNodeSelector": {}, "defaultPodDisruptionBudget": {"enabled": true},
    "defaultResources": {"limits": {"memory": "20Mi"}, "requests": {"cpu": "10m",
    "memory": "20Mi"}}, "defaultTolerations": [], "disablePolicyChecks": true, "enableHelmTest":
    false, "enableTracing": true, "hub": "docker.artifactory.ikarem.io/user/ravi/kubeflow/istio-release",
    "imagePullPolicy": "IfNotPresent", "imagePullSecrets": [], "k8sIngress": {"enableHttps":
    false, "enabled": false, "gatewayName": "ingressgateway"}, "localityLbSetting":
    {"enabled": true}, "logging": {"level": "default:info"}, "meshExpansion": {"enabled":
    false, "useILB": false}, "meshID": "", "meshNetworks": {}, "monitoringPort": 15014,
    "mtls": {"enabled": false}, "multiCluster": {"clusterName": "", "enabled": false},
    "oneNamespace": false, "outboundTrafficPolicy": {"mode": "ALLOW_ANY"}, "policyCheckFailOpen":
    false, "priorityClassName": "", "proxy": {"accessLogEncoding": "TEXT", "accessLogFile":
    "", "accessLogFormat": "", "autoInject": "enabled", "clusterDomain": "cluster.local",
    "componentLogLevel": "", "concurrency": 2, "dnsRefreshRate": "300s", "enableCoreDump":
    false, "enableCoreDumpImage": "ubuntu:xenial", "envoyAccessLogService": {"enabled":
    false, "host": null, "port": null, "tcpKeepalive": {"interval": "10s", "probes":
    3, "time": "10s"}, "tlsSettings": {"caCertificates": null, "clientCertificate":
    null, "mode": "DISABLE", "privateKey": null, "sni": null, "subjectAltNames": []}},
    "envoyMetricsService": {"enabled": false, "host": null, "port": null}, "envoyStatsd":
    {"enabled": false, "host": null, "port": null}, "excludeIPRanges": "", "excludeInboundPorts":
    "", "excludeOutboundPorts": "", "image": "proxyv2", "includeIPRanges": "*", "includeInboundPorts":
    "*", "init": {"limits": {"memory": "20Mi"}, "requests": {"cpu": "10m", "memory":
    "20Mi"}}, "kubevirtInterfaces": "", "logLevel": "", "privileged": false, "protocolDetectionTimeout":
    "100ms", "readinessFailureThreshold": 30, "readinessInitialDelaySeconds": 1, "readinessPeriodSeconds":
    2, "resources": {"limits": {"memory": "20Mi"}, "requests": {"cpu": "10m", "memory":
    "20Mi"}}, "statusPort": 15020, "tracer": "zipkin"}, "proxy_init": {"image": "proxy_init"},
    "sds": {"enabled": true, "token": {"aud": "istio-ca"}, "udsPath": "unix:/var/run/sds/uds_path"},
    "tag": "release-1.3-latest-daily", "tracer": {"datadog": {"address": "$(HOST_IP):8126"},
    "lightstep": {"accessToken": "", "address": "", "cacertPath": "", "secure": true},
    "zipkin": {"address": ""}}, "trustDomain": "", "useMCP": true}, "image": "node-agent-k8s",
    "nodeSelector": {}, "podAntiAffinityLabelSelector": [], "podAntiAffinityTermLabelSelector":
    [], "tolerations": []}, "pilot": {"autoscaleEnabled": true, "autoscaleMax": 5,
    "autoscaleMin": 1, "cpu": {"targetAverageUtilization": 80}, "enableProtocolSniffingForInbound":
    false, "enableProtocolSniffingForOutbound": true, "enabled": true, "env": {"GODEBUG":
    "gctrace=1", "PILOT_PUSH_THROTTLE": 100}, "global": {"arch": {"amd64": 2, "ppc64le":
    2, "s390x": 2}, "configValidation": true, "controlPlaneSecurityEnabled": true,
    "defaultNodeSelector": {}, "defaultPodDisruptionBudget": {"enabled": true}, "defaultResources":
    {"limits": {"memory": "20Mi"}, "requests": {"cpu": "10m", "memory": "20Mi"}},
    "defaultTolerations": [], "disablePolicyChecks": true, "enableHelmTest": false,
    "enableTracing": true, "hub": "docker.artifactory.ikarem.io/user/ravi/kubeflow/istio-release",
    "imagePullPolicy": "IfNotPresent", "imagePullSecrets": [], "k8sIngress": {"enableHttps":
    false, "enabled": false, "gatewayName": "ingressgateway"}, "localityLbSetting":
    {"enabled": true}, "logging": {"level": "default:info"}, "meshExpansion": {"enabled":
    false, "useILB": false}, "meshID": "", "meshNetworks": {}, "monitoringPort": 15014,
    "mtls": {"enabled": false}, "multiCluster": {"clusterName": "", "enabled": false},
    "oneNamespace": false, "outboundTrafficPolicy": {"mode": "ALLOW_ANY"}, "policyCheckFailOpen":
    false, "priorityClassName": "", "proxy": {"accessLogEncoding": "TEXT", "accessLogFile":
    "", "accessLogFormat": "", "autoInject": "enabled", "clusterDomain": "cluster.local",
    "componentLogLevel": "", "concurrency": 2, "dnsRefreshRate": "300s", "enableCoreDump":
    false, "enableCoreDumpImage": "ubuntu:xenial", "envoyAccessLogService": {"enabled":
    false, "host": null, "port": null, "tcpKeepalive": {"interval": "10s", "probes":
    3, "time": "10s"}, "tlsSettings": {"caCertificates": null, "clientCertificate":
    null, "mode": "DISABLE", "privateKey": null, "sni": null, "subjectAltNames": []}},
    "envoyMetricsService": {"enabled": false, "host": null, "port": null}, "envoyStatsd":
    {"enabled": false, "host": null, "port": null}, "excludeIPRanges": "", "excludeInboundPorts":
    "", "excludeOutboundPorts": "", "image": "proxyv2", "includeIPRanges": "*", "includeInboundPorts":
    "*", "init": {"limits": {"memory": "20Mi"}, "requests": {"cpu": "10m", "memory":
    "20Mi"}}, "kubevirtInterfaces": "", "logLevel": "", "privileged": false, "protocolDetectionTimeout":
    "100ms", "readinessFailureThreshold": 30, "readinessInitialDelaySeconds": 1, "readinessPeriodSeconds":
    2, "resources": {"limits": {"memory": "20Mi"}, "requests": {"cpu": "10m", "memory":
    "20Mi"}}, "statusPort": 15020, "tracer": "zipkin"}, "proxy_init": {"image": "proxy_init"},
    "sds": {"enabled": true, "token": {"aud": "istio-ca"}, "udsPath": "unix:/var/run/sds/uds_path"},
    "tag": "release-1.3-latest-daily", "tracer": {"datadog": {"address": "$(HOST_IP):8126"},
    "lightstep": {"accessToken": "", "address": "", "cacertPath": "", "secure": true},
    "zipkin": {"address": ""}}, "trustDomain": "", "useMCP": true}, "image": "pilot",
    "keepaliveMaxServerConnectionAge": "30m", "nodeSelector": {}, "podAntiAffinityLabelSelector":
    [], "podAntiAffinityTermLabelSelector": [], "resources": {"requests": {"cpu":
    "500m", "memory": "2048Mi"}}, "rollingMaxSurge": "100%", "rollingMaxUnavailable":
    "25%", "sidecar": true, "tolerations": [], "traceSampling": 1}, "prometheus":
    {"contextPath": "/prometheus", "enabled": true, "global": {"arch": {"amd64": 2,
    "ppc64le": 2, "s390x": 2}, "configValidation": true, "controlPlaneSecurityEnabled":
    true, "defaultNodeSelector": {}, "defaultPodDisruptionBudget": {"enabled": true},
    "defaultResources": {"limits": {"memory": "20Mi"}, "requests": {"cpu": "10m",
    "memory": "20Mi"}}, "defaultTolerations": [], "disablePolicyChecks": true, "enableHelmTest":
    false, "enableTracing": true, "hub": "docker.artifactory.ikarem.io/user/ravi/kubeflow/istio-release",
    "imagePullPolicy": "IfNotPresent", "imagePullSecrets": [], "k8sIngress": {"enableHttps":
    false, "enabled": false, "gatewayName": "ingressgateway"}, "localityLbSetting":
    {"enabled": true}, "logging": {"level": "default:info"}, "meshExpansion": {"enabled":
    false, "useILB": false}, "meshID": "", "meshNetworks": {}, "monitoringPort": 15014,
    "mtls": {"enabled": false}, "multiCluster": {"clusterName": "", "enabled": false},
    "oneNamespace": false, "outboundTrafficPolicy": {"mode": "ALLOW_ANY"}, "policyCheckFailOpen":
    false, "priorityClassName": "", "proxy": {"accessLogEncoding": "TEXT", "accessLogFile":
    "", "accessLogFormat": "", "autoInject": "enabled", "clusterDomain": "cluster.local",
    "componentLogLevel": "", "concurrency": 2, "dnsRefreshRate": "300s", "enableCoreDump":
    false, "enableCoreDumpImage": "ubuntu:xenial", "envoyAccessLogService": {"enabled":
    false, "host": null, "port": null, "tcpKeepalive": {"interval": "10s", "probes":
    3, "time": "10s"}, "tlsSettings": {"caCertificates": null, "clientCertificate":
    null, "mode": "DISABLE", "privateKey": null, "sni": null, "subjectAltNames": []}},
    "envoyMetricsService": {"enabled": false, "host": null, "port": null}, "envoyStatsd":
    {"enabled": false, "host": null, "port": null}, "excludeIPRanges": "", "excludeInboundPorts":
    "", "excludeOutboundPorts": "", "image": "proxyv2", "includeIPRanges": "*", "includeInboundPorts":
    "*", "init": {"limits": {"memory": "20Mi"}, "requests": {"cpu": "10m", "memory":
    "20Mi"}}, "kubevirtInterfaces": "", "logLevel": "", "privileged": false, "protocolDetectionTimeout":
    "100ms", "readinessFailureThreshold": 30, "readinessInitialDelaySeconds": 1, "readinessPeriodSeconds":
    2, "resources": {"limits": {"memory": "20Mi"}, "requests": {"cpu": "10m", "memory":
    "20Mi"}}, "statusPort": 15020, "tracer": "zipkin"}, "proxy_init": {"image": "proxy_init"},
    "sds": {"enabled": true, "token": {"aud": "istio-ca"}, "udsPath": "unix:/var/run/sds/uds_path"},
    "tag": "release-1.3-latest-daily", "tracer": {"datadog": {"address": "$(HOST_IP):8126"},
    "lightstep": {"accessToken": "", "address": "", "cacertPath": "", "secure": true},
    "zipkin": {"address": ""}}, "trustDomain": "", "useMCP": true}, "hub": "docker.io/prom",
    "image": "prometheus", "ingress": {"annotations": null, "enabled": false, "hosts":
    ["prometheus.local"], "tls": null}, "nodeSelector": {}, "podAntiAffinityLabelSelector":
    [], "podAntiAffinityTermLabelSelector": [], "replicaCount": 1, "retention": "6h",
    "scrapeInterval": "15s", "security": {"enabled": true}, "service": {"annotations":
    {}, "nodePort": {"enabled": false, "port": 32090}}, "tag": "v2.8.0", "tolerations":
    []}, "security": {"citadelHealthCheck": false, "createMeshPolicy": true, "enableNamespacesByDefault":
    true, "enabled": true, "global": {"arch": {"amd64": 2, "ppc64le": 2, "s390x":
    2}, "configValidation": true, "controlPlaneSecurityEnabled": true, "defaultNodeSelector":
    {}, "defaultPodDisruptionBudget": {"enabled": true}, "defaultResources": {"limits":
    {"memory": "20Mi"}, "requests": {"cpu": "10m", "memory": "20Mi"}}, "defaultTolerations":
    [], "disablePolicyChecks": true, "enableHelmTest": false, "enableTracing": true,
    "hub": "docker.artifactory.ikarem.io/user/ravi/kubeflow/istio-release", "imagePullPolicy":
    "IfNotPresent", "imagePullSecrets": [], "k8sIngress": {"enableHttps": false, "enabled":
    false, "gatewayName": "ingressgateway"}, "localityLbSetting": {"enabled": true},
    "logging": {"level": "default:info"}, "meshExpansion": {"enabled": false, "useILB":
    false}, "meshID": "", "meshNetworks": {}, "monitoringPort": 15014, "mtls": {"enabled":
    false}, "multiCluster": {"clusterName": "", "enabled": false}, "oneNamespace":
    false, "outboundTrafficPolicy": {"mode": "ALLOW_ANY"}, "policyCheckFailOpen":
    false, "priorityClassName": "", "proxy": {"accessLogEncoding": "TEXT", "accessLogFile":
    "", "accessLogFormat": "", "autoInject": "enabled", "clusterDomain": "cluster.local",
    "componentLogLevel": "", "concurrency": 2, "dnsRefreshRate": "300s", "enableCoreDump":
    false, "enableCoreDumpImage": "ubuntu:xenial", "envoyAccessLogService": {"enabled":
    false, "host": null, "port": null, "tcpKeepalive": {"interval": "10s", "probes":
    3, "time": "10s"}, "tlsSettings": {"caCertificates": null, "clientCertificate":
    null, "mode": "DISABLE", "privateKey": null, "sni": null, "subjectAltNames": []}},
    "envoyMetricsService": {"enabled": false, "host": null, "port": null}, "envoyStatsd":
    {"enabled": false, "host": null, "port": null}, "excludeIPRanges": "", "excludeInboundPorts":
    "", "excludeOutboundPorts": "", "image": "proxyv2", "includeIPRanges": "*", "includeInboundPorts":
    "*", "init": {"limits": {"memory": "20Mi"}, "requests": {"cpu": "10m", "memory":
    "20Mi"}}, "kubevirtInterfaces": "", "logLevel": "", "privileged": false, "protocolDetectionTimeout":
    "100ms", "readinessFailureThreshold": 30, "readinessInitialDelaySeconds": 1, "readinessPeriodSeconds":
    2, "resources": {"limits": {"memory": "20Mi"}, "requests": {"cpu": "10m", "memory":
    "20Mi"}}, "statusPort": 15020, "tracer": "zipkin"}, "proxy_init": {"image": "proxy_init"},
    "sds": {"enabled": true, "token": {"aud": "istio-ca"}, "udsPath": "unix:/var/run/sds/uds_path"},
    "tag": "release-1.3-latest-daily", "tracer": {"datadog": {"address": "$(HOST_IP):8126"},
    "lightstep": {"accessToken": "", "address": "", "cacertPath": "", "secure": true},
    "zipkin": {"address": ""}}, "trustDomain": "", "useMCP": true}, "image": "citadel",
    "nodeSelector": {}, "podAntiAffinityLabelSelector": [], "podAntiAffinityTermLabelSelector":
    [], "replicaCount": 1, "rollingMaxSurge": "100%", "rollingMaxUnavailable": "25%",
    "selfSigned": true, "tolerations": [], "workloadCertTtl": "2160h"}, "sidecarInjectorWebhook":
    {"alwaysInjectSelector": [], "enableNamespacesByDefault": false, "enabled": true,
    "global": {"arch": {"amd64": 2, "ppc64le": 2, "s390x": 2}, "configValidation":
    true, "controlPlaneSecurityEnabled": true, "defaultNodeSelector": {}, "defaultPodDisruptionBudget":
    {"enabled": true}, "defaultResources": {"limits": {"memory": "20Mi"}, "requests":
    {"cpu": "10m", "memory": "20Mi"}}, "defaultTolerations": [], "disablePolicyChecks":
    true, "enableHelmTest": false, "enableTracing": true, "hub": "docker.artifactory.ikarem.io/user/ravi/kubeflow/istio-release",
    "imagePullPolicy": "IfNotPresent", "imagePullSecrets": [], "k8sIngress": {"enableHttps":
    false, "enabled": false, "gatewayName": "ingressgateway"}, "localityLbSetting":
    {"enabled": true}, "logging": {"level": "default:info"}, "meshExpansion": {"enabled":
    false, "useILB": false}, "meshID": "", "meshNetworks": {}, "monitoringPort": 15014,
    "mtls": {"enabled": false}, "multiCluster": {"clusterName": "", "enabled": false},
    "oneNamespace": false, "outboundTrafficPolicy": {"mode": "ALLOW_ANY"}, "policyCheckFailOpen":
    false, "priorityClassName": "", "proxy": {"accessLogEncoding": "TEXT", "accessLogFile":
    "", "accessLogFormat": "", "autoInject": "enabled", "clusterDomain": "cluster.local",
    "componentLogLevel": "", "concurrency": 2, "dnsRefreshRate": "300s", "enableCoreDump":
    false, "enableCoreDumpImage": "ubuntu:xenial", "envoyAccessLogService": {"enabled":
    false, "host": null, "port": null, "tcpKeepalive": {"interval": "10s", "probes":
    3, "time": "10s"}, "tlsSettings": {"caCertificates": null, "clientCertificate":
    null, "mode": "DISABLE", "privateKey": null, "sni": null, "subjectAltNames": []}},
    "envoyMetricsService": {"enabled": false, "host": null, "port": null}, "envoyStatsd":
    {"enabled": false, "host": null, "port": null}, "excludeIPRanges": "", "excludeInboundPorts":
    "", "excludeOutboundPorts": "", "image": "proxyv2", "includeIPRanges": "*", "includeInboundPorts":
    "*", "init": {"limits": {"memory": "20Mi"}, "requests": {"cpu": "10m", "memory":
    "20Mi"}}, "kubevirtInterfaces": "", "logLevel": "", "privileged": false, "protocolDetectionTimeout":
    "100ms", "readinessFailureThreshold": 30, "readinessInitialDelaySeconds": 1, "readinessPeriodSeconds":
    2, "resources": {"limits": {"memory": "20Mi"}, "requests": {"cpu": "10m", "memory":
    "20Mi"}}, "statusPort": 15020, "tracer": "zipkin"}, "proxy_init": {"image": "proxy_init"},
    "sds": {"enabled": true, "token": {"aud": "istio-ca"}, "udsPath": "unix:/var/run/sds/uds_path"},
    "tag": "release-1.3-latest-daily", "tracer": {"datadog": {"address": "$(HOST_IP):8126"},
    "lightstep": {"accessToken": "", "address": "", "cacertPath": "", "secure": true},
    "zipkin": {"address": ""}}, "trustDomain": "", "useMCP": true}, "image": "sidecar_injector",
    "neverInjectSelector": [], "nodeSelector": {}, "podAntiAffinityLabelSelector":
    [], "podAntiAffinityTermLabelSelector": [], "replicaCount": 1, "rewriteAppHTTPProbe":
    false, "rollingMaxSurge": "100%", "rollingMaxUnavailable": "25%", "tolerations":
    []}, "tracing": {"enabled": false}}'
kind: ConfigMap
metadata:
  labels:
    app: istio
    istio: sidecar-injector
  name: istio-sidecar-injector
---
apiVersion: v1
data:
  prometheus.yaml: "global:\n  scrape_interval: 15s\nscrape_configs:\n\n- job_name:\
    \ 'istio-mesh'\n  kubernetes_sd_configs:\n  - role: endpoints\n    namespaces:\n\
    \      names:\n      - $(namespace)\n\n  relabel_configs:\n  - source_labels:\
    \ [__meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]\n   \
    \ action: keep\n    regex: istio-telemetry;prometheus\n\n# Scrape config for envoy\
    \ stats\n- job_name: 'envoy-stats'\n  metrics_path: /stats/prometheus\n  kubernetes_sd_configs:\n\
    \  - role: pod\n\n  relabel_configs:\n  - source_labels: [__meta_kubernetes_pod_container_port_name]\n\
    \    action: keep\n    regex: '.*-envoy-prom'\n  - source_labels: [__address__,\
    \ __meta_kubernetes_pod_annotation_prometheus_io_port]\n    action: replace\n\
    \    regex: ([^:]+)(?::\\d+)?;(\\d+)\n    replacement: $1:15090\n    target_label:\
    \ __address__\n  - action: labelmap\n    regex: __meta_kubernetes_pod_label_(.+)\n\
    \  - source_labels: [__meta_kubernetes_namespace]\n    action: replace\n    target_label:\
    \ namespace\n  - source_labels: [__meta_kubernetes_pod_name]\n    action: replace\n\
    \    target_label: pod_name\n\n- job_name: 'istio-policy'\n  kubernetes_sd_configs:\n\
    \  - role: endpoints\n    namespaces:\n      names:\n      - $(namespace)\n\n\n\
    \  relabel_configs:\n  - source_labels: [__meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]\n\
    \    action: keep\n    regex: istio-policy;http-monitoring\n\n- job_name: 'istio-telemetry'\n\
    \  kubernetes_sd_configs:\n  - role: endpoints\n    namespaces:\n      names:\n\
    \      - $(namespace)\n\n  relabel_configs:\n  - source_labels: [__meta_kubernetes_service_name,\
    \ __meta_kubernetes_endpoint_port_name]\n    action: keep\n    regex: istio-telemetry;http-monitoring\n\
    \n- job_name: 'pilot'\n  kubernetes_sd_configs:\n  - role: endpoints\n    namespaces:\n\
    \      names:\n      - $(namespace)\n\n  relabel_configs:\n  - source_labels:\
    \ [__meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]\n   \
    \ action: keep\n    regex: istio-pilot;http-monitoring\n\n- job_name: 'galley'\n\
    \  kubernetes_sd_configs:\n  - role: endpoints\n    namespaces:\n      names:\n\
    \      - $(namespace)\n\n  relabel_configs:\n  - source_labels: [__meta_kubernetes_service_name,\
    \ __meta_kubernetes_endpoint_port_name]\n    action: keep\n    regex: istio-galley;http-monitoring\n\
    \n- job_name: 'citadel'\n  kubernetes_sd_configs:\n  - role: endpoints\n    namespaces:\n\
    \      names:\n      - $(namespace)\n\n  relabel_configs:\n  - source_labels:\
    \ [__meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]\n   \
    \ action: keep\n    regex: istio-citadel;http-monitoring\n\n# scrape config for\
    \ API servers\n- job_name: 'kubernetes-apiservers'\n  kubernetes_sd_configs:\n\
    \  - role: endpoints\n    namespaces:\n      names:\n      - default\n  scheme:\
    \ https\n  tls_config:\n    ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n\
    \  bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\n  relabel_configs:\n\
    \  - source_labels: [__meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]\n\
    \    action: keep\n    regex: kubernetes;https\n\n# scrape config for nodes (kubelet)\n\
    - job_name: 'kubernetes-nodes'\n  scheme: https\n  tls_config:\n    ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n\
    \  bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\n  kubernetes_sd_configs:\n\
    \  - role: node\n  relabel_configs:\n  - action: labelmap\n    regex: __meta_kubernetes_node_label_(.+)\n\
    \  - target_label: __address__\n    replacement: kubernetes.default.svc:443\n\
    \  - source_labels: [__meta_kubernetes_node_name]\n    regex: (.+)\n    target_label:\
    \ __metrics_path__\n    replacement: /api/v1/nodes/${1}/proxy/metrics\n\n# Scrape\
    \ config for Kubelet cAdvisor.\n#\n# This is required for Kubernetes 1.7.3 and\
    \ later, where cAdvisor metrics\n# (those whose names begin with 'container_')\
    \ have been removed from the\n# Kubelet metrics endpoint.  This job scrapes the\
    \ cAdvisor endpoint to\n# retrieve those metrics.\n#\n# In Kubernetes 1.7.0-1.7.2,\
    \ these metrics are only exposed on the cAdvisor\n# HTTP endpoint; use \"replacement:\
    \ /api/v1/nodes/${1}:4194/proxy/metrics\"\n# in that case (and ensure cAdvisor's\
    \ HTTP server hasn't been disabled with\n# the --cadvisor-port=0 Kubelet flag).\n\
    #\n# This job is not necessary and should be removed in Kubernetes 1.6 and\n#\
    \ earlier versions, or it will cause the metrics to be scraped twice.\n- job_name:\
    \ 'kubernetes-cadvisor'\n  scheme: https\n  tls_config:\n    ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n\
    \  bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\n  kubernetes_sd_configs:\n\
    \  - role: node\n  relabel_configs:\n  - action: labelmap\n    regex: __meta_kubernetes_node_label_(.+)\n\
    \  - target_label: __address__\n    replacement: kubernetes.default.svc:443\n\
    \  - source_labels: [__meta_kubernetes_node_name]\n    regex: (.+)\n    target_label:\
    \ __metrics_path__\n    replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor\n\
    \n# scrape config for service endpoints.\n- job_name: 'kubernetes-service-endpoints'\n\
    \  kubernetes_sd_configs:\n  - role: endpoints\n  relabel_configs:\n  - source_labels:\
    \ [__meta_kubernetes_service_annotation_prometheus_io_scrape]\n    action: keep\n\
    \    regex: true\n  - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]\n\
    \    action: replace\n    target_label: __scheme__\n    regex: (https?)\n  - source_labels:\
    \ [__meta_kubernetes_service_annotation_prometheus_io_path]\n    action: replace\n\
    \    target_label: __metrics_path__\n    regex: (.+)\n  - source_labels: [__address__,\
    \ __meta_kubernetes_service_annotation_prometheus_io_port]\n    action: replace\n\
    \    target_label: __address__\n    regex: ([^:]+)(?::\\d+)?;(\\d+)\n    replacement:\
    \ $1:$2\n  - action: labelmap\n    regex: __meta_kubernetes_service_label_(.+)\n\
    \  - source_labels: [__meta_kubernetes_namespace]\n    action: replace\n    target_label:\
    \ kubernetes_namespace\n  - source_labels: [__meta_kubernetes_service_name]\n\
    \    action: replace\n    target_label: kubernetes_name\n\n- job_name: 'kubernetes-pods'\n\
    \  kubernetes_sd_configs:\n  - role: pod\n  relabel_configs:  # If first two labels\
    \ are present, pod should be scraped  by the istio-secure job.\n  - source_labels:\
    \ [__meta_kubernetes_pod_annotation_prometheus_io_scrape]\n    action: keep\n\
    \    regex: true\n  # Keep target if there's no sidecar or if prometheus.io/scheme\
    \ is explicitly set to \"http\"\n  - source_labels: [__meta_kubernetes_pod_annotation_sidecar_istio_io_status,\
    \ __meta_kubernetes_pod_annotation_prometheus_io_scheme]\n    action: keep\n \
    \   regex: ((;.*)|(.*;http))\n  - source_labels: [__meta_kubernetes_pod_annotation_istio_mtls]\n\
    \    action: drop\n    regex: (true)\n  - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]\n\
    \    action: replace\n    target_label: __metrics_path__\n    regex: (.+)\n  -\
    \ source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]\n\
    \    action: replace\n    regex: ([^:]+)(?::\\d+)?;(\\d+)\n    replacement: $1:$2\n\
    \    target_label: __address__\n  - action: labelmap\n    regex: __meta_kubernetes_pod_label_(.+)\n\
    \  - source_labels: [__meta_kubernetes_namespace]\n    action: replace\n    target_label:\
    \ namespace\n  - source_labels: [__meta_kubernetes_pod_name]\n    action: replace\n\
    \    target_label: pod_name\n\n- job_name: 'kubernetes-pods-istio-secure'\n  scheme:\
    \ https\n  tls_config:\n    ca_file: /etc/istio-certs/root-cert.pem\n    cert_file:\
    \ /etc/istio-certs/cert-chain.pem\n    key_file: /etc/istio-certs/key.pem\n  \
    \  insecure_skip_verify: true  # prometheus does not support secure naming.\n\
    \  kubernetes_sd_configs:\n  - role: pod\n  relabel_configs:\n  - source_labels:\
    \ [__meta_kubernetes_pod_annotation_prometheus_io_scrape]\n    action: keep\n\
    \    regex: true\n  # sidecar status annotation is added by sidecar injector and\n\
    \  # istio_workload_mtls_ability can be specifically placed on a pod to indicate\
    \ its ability to receive mtls traffic.\n  - source_labels: [__meta_kubernetes_pod_annotation_sidecar_istio_io_status,\
    \ __meta_kubernetes_pod_annotation_istio_mtls]\n    action: keep\n    regex: (([^;]+);([^;]*))|(([^;]*);(true))\n\
    \  - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scheme]\n\
    \    action: drop\n    regex: (http)\n  - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]\n\
    \    action: replace\n    target_label: __metrics_path__\n    regex: (.+)\n  -\
    \ source_labels: [__address__]  # Only keep address that is host:port\n    action:\
    \ keep    # otherwise an extra target with ':443' is added for https scheme\n\
    \    regex: ([^:]+):(\\d+)\n  - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]\n\
    \    action: replace\n    regex: ([^:]+)(?::\\d+)?;(\\d+)\n    replacement: $1:$2\n\
    \    target_label: __address__\n  - action: labelmap\n    regex: __meta_kubernetes_pod_label_(.+)\n\
    \  - source_labels: [__meta_kubernetes_namespace]\n    action: replace\n    target_label:\
    \ namespace\n  - source_labels: [__meta_kubernetes_pod_name]\n    action: replace\n\
    \    target_label: pod_name"
kind: ConfigMap
metadata:
  name: prometheus
---
apiVersion: v1
data:
  validating-webhook-configuration.yaml: "apiVersion: admissionregistration.k8s.io/v1beta1\n\
    kind: ValidatingWebhookConfiguration\nmetadata:\n  name: istio-galley\n  labels:\n\
    \    app: galley\n    istio: galley\nwebhooks:\n  - name: pilot.validation.istio.io\n\
    \    clientConfig:\n      service:\n        name: istio-galley\n        namespace:\
    \ $(namespace)\n        path: \"/admitpilot\"\n      caBundle: \"\"\n    rules:\n\
    \      - operations:\n        - CREATE\n        - UPDATE\n        apiGroups:\n\
    \        - config.istio.io\n        apiVersions:\n        - v1alpha2\n       \
    \ resources:\n        - httpapispecs\n        - httpapispecbindings\n        -\
    \ quotaspecs\n        - quotaspecbindings\n      - operations:\n        - CREATE\n\
    \        - UPDATE\n        apiGroups:\n        - rbac.istio.io\n        apiVersions:\n\
    \        - \"*\"\n        resources:\n        - \"*\"\n      - operations:\n \
    \       - CREATE\n        - UPDATE\n        apiGroups:\n        - authentication.istio.io\n\
    \        apiVersions:\n        - \"*\"\n        resources:\n        - \"*\"\n\
    \      - operations:\n        - CREATE\n        - UPDATE\n        apiGroups:\n\
    \        - networking.istio.io\n        apiVersions:\n        - \"*\"\n      \
    \  resources:\n        - destinationrules\n        - envoyfilters\n        - gateways\n\
    \        - serviceentries\n        - sidecars\n        - virtualservices\n   \
    \ failurePolicy: Fail\n    sideEffects: None\n  - name: mixer.validation.istio.io\n\
    \    clientConfig:\n      service:\n        name: istio-galley\n        namespace:\
    \ $(namespace)\n        path: \"/admitmixer\"\n      caBundle: \"\"\n    rules:\n\
    \      - operations:\n        - CREATE\n        - UPDATE\n        apiGroups:\n\
    \        - config.istio.io\n        apiVersions:\n        - v1alpha2\n       \
    \ resources:\n        - rules\n        - attributemanifests\n        - circonuses\n\
    \        - deniers\n        - fluentds\n        - kubernetesenvs\n        - listcheckers\n\
    \        - memquotas\n        - noops\n        - opas\n        - prometheuses\n\
    \        - rbacs\n        - solarwindses\n        - stackdrivers\n        - cloudwatches\n\
    \        - dogstatsds\n        - statsds\n        - stdios\n        - apikeys\n\
    \        - authorizations\n        - checknothings\n        # - kuberneteses\n\
    \        - listentries\n        - logentries\n        - metrics\n        - quotas\n\
    \        - reportnothings\n        - tracespans\n        - adapters\n        -\
    \ handlers\n        - instances\n        - templates\n        - zipkins\n    failurePolicy:\
    \ Fail\n    sideEffects: None\n"
kind: ConfigMap
metadata:
  name: istio-galley-configuration
---
apiVersion: v1
data:
  istio-security-custom-resources.yaml: "# Authentication policy to enable permissive\
    \ mode for all services (that have sidecar) in the mesh.\napiVersion: \"authentication.istio.io/v1alpha1\"\
    \nkind: \"MeshPolicy\"\nmetadata:\n  name: \"default\"\n  labels:\n    app: security\n\
    spec:\n  peers:\n  - mtls:\n      mode: PERMISSIVE\n"
  istio-security-run.sh: "#!/bin/sh\n\nset -x\n\nif [ \"$#\" -ne \"1\" ]; then\n \
    \   echo \"first argument should be path to custom resource yaml\"\n    exit 1\n\
    fi\n\npathToResourceYAML=${1}\n\nkubectl get validatingwebhookconfiguration istio-galley\
    \ 2>/dev/null\nif [ \"$?\" -eq 0 ]; then\n    echo \"istio-galley validatingwebhookconfiguration\
    \ found - waiting for istio-galley deployment to be ready\"\n    while true; do\n\
    \        kubectl -n $(namespace) get deployment istio-galley 2>/dev/null\n   \
    \     if [ \"$?\" -eq 0 ]; then\n            break\n        fi\n        sleep\
    \ 1\n    done\n    kubectl -n $(namespace) rollout status deployment istio-galley\n\
    \    if [ \"$?\" -ne 0 ]; then\n        echo \"istio-galley deployment rollout\
    \ status check failed\"\n        exit 1\n    fi\n    echo \"istio-galley deployment\
    \ ready for configuration validation\"\nfi\nsleep 5\nkubectl apply -f ${pathToResourceYAML}"
kind: ConfigMap
metadata:
  name: istio-security-custom-resources
